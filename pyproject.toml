[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "arris-modem-status"
dynamic = ["version"]
description = "High-performance Python client for querying Arris modem status via HNAP with HTTP compatibility and browser-compatible parsing."
authors = [
    { name = "Charles Marshall", email = "charles@wozi.com" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.1",
    "urllib3>=1.26.0"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking :: Monitoring",
    "Topic :: System :: Hardware",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities"
]
keywords = [
    "arris",
    "modem", 
    "cable",
    "DOCSIS",
    "hnap",
    "networking",
    "monitoring",
    "http-compatibility",
    "urllib3",
    "performance",
    "concurrent",
    "status"
]

[project.urls]
Homepage = "https://github.com/csmarshall/arris-modem-status"
Repository = "https://github.com/csmarshall/arris-modem-status"
Documentation = "https://github.com/csmarshall/arris-modem-status#readme"
"Bug Tracker" = "https://github.com/csmarshall/arris-modem-status/issues"
Changelog = "https://github.com/csmarshall/arris-modem-status/blob/main/CHANGELOG.md"

[project.scripts]
arris-modem-status = "arris_modem_status.cli:main"

[project.optional-dependencies]
# Core development dependencies
dev = [
    # Testing framework
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-asyncio>=0.20.0",
    
    # Code quality and formatting
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.980",
    
    # Security and linting
    "bandit>=1.7.5",
    "safety>=2.0.0",
    
    # Coverage and reporting
    "coverage>=6.0.0",
    "coverage[toml]>=6.0.0",
    
    # Documentation and analysis
    "beautifulsoup4>=4.9.0",
    "lxml>=4.9.0",
    
    # Development utilities
    "packaging>=21.0",
    "setuptools>=65.0",
    "wheel>=0.40.0",
    "build>=0.10.0",
    "twine>=4.0.0"
]

# Testing-specific dependencies
testing = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-asyncio>=0.20.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",  # Parallel testing
    "coverage>=6.0.0",
    "coverage[toml]>=6.0.0",
    "tox>=4.0.0"
]

# Enhanced debugging and analysis tools
debug = [
    # Browser automation for enhanced capture
    "playwright>=1.40.0",
    "selenium>=4.0.0",
    "selenium-wire>=5.0.0",
    "webdriver-manager>=3.8.0",
    
    # HTML parsing and analysis
    "beautifulsoup4>=4.9.0",
    "lxml>=4.9.0",
    
    # Network analysis
    "requests-toolbelt>=0.10.0",
    "urllib3>=1.26.0"
]

# Quality assurance dependencies
qa = [
    "black>=22.0.0",
    "isort>=5.10.0", 
    "flake8>=5.0.0",
    "mypy>=0.980",
    "bandit>=1.7.5",
    "safety>=2.0.0",
    "pre-commit>=3.0.0"
]

# Build and release dependencies
build = [
    "build>=0.10.0",
    "twine>=4.0.0",
    "wheel>=0.40.0",
    "setuptools>=65.0",
    "check-manifest>=0.49"
]

# All dependencies for complete development environment
all = [
    "arris-modem-status[dev,testing,debug,qa,build]"
]

# DYNAMIC VERSION CONFIGURATION
[tool.setuptools.dynamic]
version = {attr = "arris_modem_status.__version__"}

[tool.setuptools]
packages = ["arris_modem_status"]

[tool.setuptools.package-data]
arris_modem_status = ["py.typed"]

# BLACK CODE FORMATTER CONFIGURATION
[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | tests/fixtures
)/
'''

# ISORT IMPORT SORTING CONFIGURATION
[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["arris_modem_status", "tests"]

# MYPY TYPE CHECKING CONFIGURATION
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "urllib3.*",
    "requests.*",
    "selenium.*",
    "playwright.*"
]
ignore_missing_imports = true

# PYTEST CONFIGURATION
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-q", 
    "--strict-markers",
    "--strict-config",
    "--tb=short"
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "http_compatibility: marks tests for HTTP compatibility",
    "connection: marks tests for connection handling",
    "performance: marks tests for performance validation",
    "scoping: marks tests for variable scoping fixes",
    "auth: marks tests for authentication functionality",
    "parsing: marks tests for data parsing",
    "errors: marks tests for error scenarios"
]
timeout = 30
filterwarnings = [
    "ignore::urllib3.exceptions.InsecureRequestWarning",
    "ignore::DeprecationWarning:urllib3.*",
    "ignore::PendingDeprecationWarning"
]

# COVERAGE CONFIGURATION
[tool.coverage.run]
source = ["arris_modem_status"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "arris_modem_status/__main__.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# BANDIT SECURITY LINTING CONFIGURATION
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

# FLAKE8 CONFIGURATION (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration

# NOTE: tox.ini and .pre-commit-config.yaml are separate files
# This keeps pyproject.toml clean and focused on Python packaging
