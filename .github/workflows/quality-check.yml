name: Code Quality and Version Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check version consistency
      run: |
        python scripts/manage_version.py --validate
        python scripts/migrate_setup_cfg.py --validate
        echo "✅ Version consistency validated"

    - name: Check whitespace compliance (PEP 8)
      run: |
        python scripts/manage_version.py --clean
        # Check if any files were modified by whitespace cleanup
        if [ -n "$(git status --porcelain)" ]; then
          echo "❌ Whitespace issues found. Please run 'make clean-whitespace'"
          git diff
          exit 1
        fi
        echo "✅ Whitespace compliance verified"

    - name: Code formatting check
      run: |
        black --check arris_modem_status/ tests/ scripts/ --line-length 120
        isort --check arris_modem_status/ tests/ scripts/ --profile black --line-length 120

    - name: Linting
      run: |
        flake8 arris_modem_status/ --max-line-length=120 --extend-ignore=E203,W503
        mypy arris_modem_status/ --ignore-missing-imports

    - name: Security check
      run: |
        bandit -r arris_modem_status/ -ll

    - name: Run tests
      run: |
        pytest tests/ -v --cov=arris_modem_status --cov-report=term-missing --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  version-check:
    name: Version Management Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Check if version was bumped (for PRs)
      run: |
        # Get version from main branch
        git checkout origin/main
        MAIN_VERSION=$(python scripts/manage_version.py --current)
        
        # Get version from current branch
        git checkout -
        CURRENT_VERSION=$(python scripts/manage_version.py --current)
        
        echo "Main branch version: $MAIN_VERSION"
        echo "Current branch version: $CURRENT_VERSION"
        
        if [ "$MAIN_VERSION" = "$CURRENT_VERSION" ]; then
          echo "⚠️ Version not bumped in this PR"
          echo "Consider running: make version-bump-patch (or minor/major)"
          # Don't fail the build, just warn
        else
          echo "✅ Version bumped: $MAIN_VERSION → $CURRENT_VERSION"
        fi

  build-test:
    name: Build and Distribution Test
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build distribution
      run: |
        python -m build

    - name: Check distribution
      run: |
        python -m twine check dist/*

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import arris_modem_status; print(f'Version: {arris_modem_status.__version__}')"

  pre-commit-check:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files